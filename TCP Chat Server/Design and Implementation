2. Session Invites
	The user will enter a command in the form "invite (client ID)". The client program will recognize the command and call invite(). This function sends a message with type INVITE and the specified client ID in the data field. It then sends this message and waits for an INV_ACK or INV_NAK message type. The server will receive the message with INVITE type, check if the data field matchs any of the existing users' clientIDs and if so, sends an INVITE-type message with the sender's sessionID in the data field to the sender's specified client. If no client is found then an INV_NAK is sent back to the sender. The client who received the INVITE will ask the user if they want to join the sender's session and send an INV_ACK or INV_NAK based on their response. If the server receives an INV_ACK it will boot the client from their current session, join them to the one they were invited to, and send an INV_ACK back to the sender. If the server recieves an INV_NAK it will send an INV_NAK to the sender.

5. User Registration
	The user will enter a command in the form "register (client ID) (password) (server IP) (destination port)". The client program will recognize this command and call register_user(). This functional will create a message with type REGISTER, source (client ID), and data (password). It will then create a sockaddr_in object using the specified server IP and destination port number. It will then connect to the server, send the message, and wait for a REG_ACK or REG_NAK message type. The server will receive this message and then check if there are too many clients and return a REG_NAK if so. If there are not too many clients it will find an empty slot in the logininfo.txt file and insert the client's ID and password there, as well as, create a new client object for the client. It will then send a REG_ACK back to the client. All the clients registered in the text file will be created as client objects on program startup.
